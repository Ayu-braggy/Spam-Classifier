# -*- coding: utf-8 -*-
"""Lab7f.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YsgumQN1nEAxDtmBv2MUp3-96ctEZOlh
"""



import numpy as np
import pandas as pd
df=pd.read_csv('spam.csv', encoding='ISO-8859-1')

df.drop(labels=['Unnamed: 2','Unnamed: 3','Unnamed: 4'],axis=1,inplace=True)
df.rename(columns={'v1':'Class','v2':'text'},inplace=True)
df['numClass'] = df['Class'].map({'ham':0, 'spam':1})
df.head()


df['Count']=0
for i in np.arange(0,len(df.text)):
    df.loc[i,'Count'] = len(df.loc[i,'text'])

# Unique values in target set
print("Unique values in the Class set: ", df.Class.unique())

from nltk.stem import WordNetLemmatizer, PorterStemmer
from nltk.tokenize import word_tokenize
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score
import nltk
nltk.download('wordnet')
nltk.download('omw-1.4')
nltk.download('punkt')
from nltk.corpus import stopwords

import re

nltk.download('stopwords')


from nltk import PorterStemmer

stemmer = PorterStemmer()

corpus = []
for i in range(0, len(df)):
    txt=  re.sub('[^a-zA-Z]', ' ', df['text'][i])  #removing texts other than alphabets
    txt = txt.lower()
    txt = txt.split()
    txt = [stemmer.stem(word) for word in txt if not word in stopwords.words('english')]
    txt = ' '.join(txt)
    corpus.append(txt)
# print(corpus)


from sklearn.feature_extraction.text import TfidfVectorizer
vectorizer = TfidfVectorizer()
X=corpus
X = vectorizer.fit_transform(X).toarray()



X_train, X_test, y_train, y_test = train_test_split(X, df["numClass"], test_size=0.25, random_state=42)

from sklearn.naive_bayes import GaussianNB

# Train and evaluate the Naive Bayes Classifier
nb_model = GaussianNB()
nb_model.fit(X_train, y_train)
nb_pred = nb_model.predict(X_test)
nb_acc = accuracy_score(y_test, nb_pred)
print("Multinomial Classifier Accuracy for text word:", nb_acc)
print("Multinomial Classifier Prediction for text word:", nb_pred)

import pickle
pickle.dump(vectorizer, open('vectorizer.pkl','wb'))
pickle.dump(nb_model, open('model.pkl','wb'))

vectorizer=pickle.load(open('vectorizer.pkl','rb'))
nb_model=pickle.load(open('nb_model.pkl','rb'))

message="fsddfd "
data=[message]
tf=vectorizer.transform(data).toarray()
predict=nb_model.predict(tf)
print(predict[0])